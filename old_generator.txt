        public void CreateNewField(int input1, int input2, WordsSet words)
        {
            xSize = input1;
            ySize = input2;
            cellLetter = new char[xSize, ySize];
            cellColor = new ConsoleColor[xSize, ySize, 2];

            //создание поля свободных ячеек
            bool[,] preField = new bool[xSize + 2, ySize + 2];
            for (int y = 0; y <= ySize + 1; y++)
                for (int x = 0; x <= xSize + 1; x++)
                    if (x == xSize + 1 || y == 0 || x == 0 || y == ySize + 1) preField[x, y] = false;
                    else preField[x, y] = true;

            //заполнение поля шаблонами слов
            int cellNum = xSize * ySize;
            foreach (int pos in GetArrayOfPositionsWithRandomOrder(xSize, ySize))
            {
                int x = pos % xSize + 1;
                int y = pos / ySize + 1;

                if (preField[x, y])
                {
                    int dir = FindDirection(x, y, preField);

                    if (dir != 0)
                    {
                        int lenght = 0;
                        wordPos.Add(new List<int>());

                        do
                        {
                            preField[x, y] = false;
                            cellNum--;

                            lenght++;
                            wordPos[wordPos.Count - 1].Add((y - 1) * xSize + (x - 1));

                            int localX = x + (-(dir - 2) % 2);
                            int localY = y + ((dir - 3) % 2);
                            if (!preField[localX, localY])
                            {
                                dir = FindDirection(x, y, preField);
                                if (dir == 0) break;
                            }
                            x += (-(dir - 2) % 2);
                            y += (dir - 3) % 2;

                            if (lenght == words.wordsSet.Count - 1 || (lenght >= 4 && rnd.Next((Settings.xSize + Settings.ySize)/2) == 0)) break;
                        } while (true);
                    }
                }
            }

            //заполнение пустот
            int time = 0;
            do
            {
                for (int y = 1; y <= ySize; y++)
                    for (int x = 1; x <= xSize; x++)
                    {
                        if (preField[x, y])
                        {
                            int pos = (y - 1) * xSize + (x - 1);

                            for (int i = 0; i < wordPos.Count; i++)
                            {
                                int dif = Math.Abs(pos - wordPos[i][0]);
                                if (dif == 1 || dif == 10)
                                {
                                    wordPos[i].Insert(0, pos);
                                    cellNum--;
                                    preField[x, y] = false;
                                    break;
                                }

                                dif = Math.Abs(pos - wordPos[i][wordPos[i].Count - 1]);
                                if (dif == 1 || dif == 10)
                                { 
                                    wordPos[i].Add(pos);
                                    cellNum--;
                                    preField[x, y] = false;
                                    break;
                                }
                            }
                        }
                    }
                time++;
            } while (cellNum > 0 && time < 4);

            //деление слишком больших слов
            for (int i = 0; i < wordPos.Count; i++)
            {
                if (wordPos[i].Count >= words.wordsSet.Count)
                {
                    int lenght = wordPos[i].Count;
                    int mid = lenght / 2 + (lenght % 2) / 5;

                    wordPos.Add(new List<int>());
                    wordPos.Add(new List<int>());

                    for (int ii = 0; ii < lenght / 2; ii++)
                        wordPos[wordPos.Count - 2].Add(wordPos[i][ii]);

                    for (int ii = mid; ii < lenght; ii++)
                        wordPos[wordPos.Count - 1].Add(wordPos[i][ii]);

                    wordPos.RemoveAt(i);
                    i--;
                }
            }

            //подбор слов в шаблоны слов
            for (int i = 0; i < wordPos.Count; i++)
                {
                    int lenght = wordPos[i].Count;

                    if (lenght <= words.wordsSet.Count - 1 && words.wordsSet[lenght].Count != 0)
                    {
                        int randomNum = rnd.Next(words.wordsSet[lenght].Count);

                        wordsList.Add(words.wordsSet[lenght][randomNum]);

                        words.wordsSet[lenght].Remove(wordsList[wordsList.Count - 1]);

                        if (words.wordsSet.Count == lenght && words.wordsSet[lenght].Count == 0)
                            words.wordsSet.RemoveAt(words.wordsSet.Count - 1);
                    }
                    else
                    {
                        wordsList.Add(new string('0', lenght));
                    }
                }

            //заполнение основного поля буквами и присваивание им цвета
            for (int i = 0; i < wordsList.Count; i++)
                for (int ii = 0; ii < wordsList[i].Length; ii++)
                {
                    int x = wordPos[i][ii] % xSize;
                    int y = wordPos[i][ii] / xSize;
                    cellLetter[x, y] = wordsList[i][ii];
                }

            for (int y = 0; y < ySize; y++)
                for (int x = 0; x < xSize; x++)
                {
                    if (cellLetter[x, y] == '\0')
                        cellLetter[x, y] = 'Y';//lettersList[rnd.Next(lettersList.Length)];

                    cellColor[x, y, 0] = Settings.Colors[Settings.fieldColor, 0];
                    cellColor[x, y, 1] = Settings.Colors[Settings.fieldColor, 1];
                }
        }

        public void CreateNewField(int input1, int input2, WordsSet words)
        {
            xSize = input1;
            ySize = input2;
            cellLetter = new char[xSize, ySize];
            cellColor = new ConsoleColor[xSize, ySize, 2];

            //создание поля свободных ячеек
            bool[,] preField = new bool[xSize + 2, ySize + 2];
            for (int y = 0; y <= ySize + 1; y++)
                for (int x = 0; x <= xSize + 1; x++)
                    if (x == xSize + 1 || y == 0 || x == 0 || y == ySize + 1) preField[x, y] = false;
                    else preField[x, y] = true;

            

            //Заполнение поля шаблонами слов
            int xStart, yStart;
            if (rnd.Next(2) == 0)
            {
                xStart = rnd.Next(xSize) + 1;
                yStart = (rnd.Next(2) == 0) ? 1 : ySize;
            }
            else
            {
                xStart = (rnd.Next(2) == 0) ? 1 : xSize;
                yStart = rnd.Next(ySize) + 1;
            }
            int dir = GetStartDirection(xStart, yStart, preField);

            int[,] numField = new int[xSize, ySize];
            int openCellNum = xSize * ySize;
            var dirStory = new List<int>();
            var actionStory = new List<bool[]>();
            int actionMod = 0;
            {
                int x = xStart;
                int y = yStart;
                while (openCellNum != 0)
                {
                    if (preField[x, y])
                    {
                        preField[x, y] = false;
                        openCellNum--;
                        numField[x - 1, y - 1] = xSize * ySize - openCellNum;
                        actionStory.Add(GetOpenDirections(x, y, preField));
                        dirStory.Add(dir);
                    }

                    MyVector2 coordLocal = GetNextCellCoord(x, y, dir);

                    if (!preField[coordLocal.X, coordLocal.Y])
                    {
                        int oldDir = dir;
                        dir = FindDirection(x, y, preField);
                        if (dir == 0)
                            if (openCellNum > 0)
                                actionMod = 2;
                            else
                                break;

                        if (actionMod == 0)
                        {
                            if (rnd.Next(3) == 0) actionMod = 1;
                        }
                        else if (actionMod == 1)
                        {
                            if (rnd.Next(3) == 0) actionMod = 0;

                            MyVector2 coordNext  = GetNextCellCoord(x, y, dir);
                            MyVector2 coordNext2 = GetNextCellCoord(coordNext.X, coordNext.Y, (oldDir+1) % 4 + 1);

                            if (preField[coordNext2.X,coordNext2.Y])
                            {
                                actionStory.Add(GetOpenDirections(coordNext.X, coordNext.Y, preField));
                                actionStory[actionStory.Count - 1][dir - 1] = false;
                                preField[coordNext.X , coordNext.Y ] = false;
                                preField[coordNext2.X, coordNext2.Y] = false;
                                actionStory.Add(GetOpenDirections(coordNext2.X, coordNext2.Y, preField));
                                openCellNum -= 2;
                                numField[coordNext.X - 1 , coordNext.Y - 1 ] = xSize * ySize - openCellNum - 1;
                                numField[coordNext2.X - 1, coordNext2.Y - 1] = xSize * ySize - openCellNum;
                                dirStory.Add(dir);
                                dirStory.Add((oldDir + 1) % 4 + 1);
                                x = coordNext2.X;
                                y = coordNext2.Y;
                                dir = (oldDir + 1) % 4 + 1;
                            }
                            else
                            {
                                actionMod = 0;
                            }
                        }
                        else if (actionMod == 2)
                        {
                            dir = FindDirection(actionStory[actionStory.Count - 1]);
                            while (dir == 0)
                            {
                                preField[x, y] = true;
                                numField[x - 1, y - 1] = 0;
                                openCellNum++;
                                MyVector2 oldCoord = GetNextCellCoord(x, y, (dirStory[dirStory.Count - 1] + 1) % 4 + 1);
                                x = oldCoord.X;
                                y = oldCoord.Y;

                                actionStory.RemoveAt(actionStory.Count - 1);
                                dirStory.RemoveAt(dirStory.Count - 1);

                                dir = FindDirection(actionStory[actionStory.Count - 1]);
                            }
                        }
                    }
                    else
                    {
                        actionStory[actionStory.Count - 1][dir - 1] = false;
                        x = coordLocal.X;
                        y = coordLocal.Y;
                    }
                }
            }

            for (int i = 0; i < ySize; i++)
            {
                Console.SetCursorPosition(0, i);
                for (int ii = 0; ii < xSize; ii++)
                {
                    Console.Write(numField[i, ii] + new string(' ', 3 - numField[i, ii].ToString().Length));
                }
            }
            Console.WriteLine();

            //подбор слов в шаблоны слов
            for (int i = 0; i < wordPos.Count; i++)
                {
                    int lenght = wordPos[i].Count;

                    if (lenght <= words.wordsSet.Count - 1 && words.wordsSet[lenght].Count != 0)
                    {
                        int randomNum = rnd.Next(words.wordsSet[lenght].Count);

                        wordsList.Add(words.wordsSet[lenght][randomNum]);

                        words.wordsSet[lenght].Remove(wordsList[wordsList.Count - 1]);

                        if (words.wordsSet.Count == lenght && words.wordsSet[lenght].Count == 0)
                            words.wordsSet.RemoveAt(words.wordsSet.Count - 1);
                    }
                    else
                    {
                        wordsList.Add(new string('0', lenght));
                    }
                }

            //заполнение основного поля буквами и присваивание им цвета
            for (int i = 0; i < wordsList.Count; i++)
                for (int ii = 0; ii < wordsList[i].Length; ii++)
                {
                    int x = wordPos[i][ii] % xSize;
                    int y = wordPos[i][ii] / xSize;
                    cellLetter[x, y] = wordsList[i][ii];
                }

            for (int y = 0; y < ySize; y++)
                for (int x = 0; x < xSize; x++)
                {
                    if (cellLetter[x, y] == '\0')
                        cellLetter[x, y] = 'Y';//lettersList[rnd.Next(lettersList.Length)];

                    cellColor[x, y, 0] = Settings.Colors[Settings.fieldColor, 0];
                    cellColor[x, y, 1] = Settings.Colors[Settings.fieldColor, 1];
                }
        }